# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-go-chat-service
configValidationMode: error
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'


custom:
  currentStage: ${opt:stage, self:provider.stage}
  chatConnectionsTableName: chat-connections-#{AWS::AccountId}-${self:custom.currentStage}

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  iamManagedPolicies:
  - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  timeout: 29
  stage: dev
  lambdaHashingVersion: 20201221
  versionFunctions: false


plugins:
  - serverless-pseudo-parameters
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  connect:
    handler: bin/connect
    events:
      - websocket: $connect
    environment:
      CHAT_CONNECTIONS_TABLE_NAME: ${self:custom.chatConnectionsTableName}

  disconnect:
    handler: bin/disconnect
    events:
      - websocket: $disconnect
    environment:
      CHAT_CONNECTIONS_TABLE_NAME: ${self:custom.chatConnectionsTableName}

  message:
    handler: bin/message
    events:
      - websocket:
          route: onMessage # will trigger if $request.body.action === "onMessage"
    environment:
      CHAT_CONNECTIONS_TABLE_NAME: ${self:custom.chatConnectionsTableName}

resources:
  Resources:
    connectionsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: chat-connections
        AttributeDefinitions:
          - AttributeName: connectionID
            AttributeType: S
        KeySchema:
          - AttributeName: connectionID
                KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
